CREATE TABLE users (
    user_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    username     VARCHAR2(50) NOT NULL UNIQUE,
    email        VARCHAR2(100) NOT NULL UNIQUE,
    password     VARCHAR2(255) NOT NULL,
    created_at   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    status       VARCHAR2(20) DEFAULT 'active' NOT NULL
        CHECK (status IN ('active', 'inactive', 'banned'))
);


CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_id     NUMBER NOT NULL,
    category_name VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_cat_user FOREIGN KEY (user_id) REFERENCES users(user_id)
);

--we need user id in categories for different users to have different categories

CREATE TABLE currency (
    currency_code        NUMBER(10)       PRIMARY KEY,
    symbol               CHAR(3)          NOT NULL,
    name                 VARCHAR2(100)    NOT NULL,
    exchange_rate_to_base NUMBER(15,6)    NOT NULL
);


CREATE TABLE transactions (
    transaction_id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_id              NUMBER NOT NULL,
    category_id          NUMBER NOT NULL,
    currency_code        NUMBER,
    amount               NUMBER(10,2) NOT NULL,
    type                 VARCHAR2(10) NOT NULL
        CHECK (type IN ('credit', 'debit')),
    transaction_datetime TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

    CONSTRAINT fk_txn_user FOREIGN KEY (user_id)
        REFERENCES users(user_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_txn_category FOREIGN KEY (category_id)
        REFERENCES categories(category_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_txn_currency FOREIGN KEY (currency_code)
        REFERENCES currency(currency_code)
        ON DELETE SET NULL
);


CREATE TABLE budgets (
    budget_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_id        NUMBER NOT NULL,
    category_id    NUMBER NOT NULL,
    currency_code  NUMBER,
    amount         NUMBER(10,2) NOT NULL,
    start_date     DATE NOT NULL,
    end_date       DATE NOT NULL,

    CONSTRAINT fk_budget_user FOREIGN KEY (user_id)
        REFERENCES users(user_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_budget_category FOREIGN KEY (category_id)
        REFERENCES categories(category_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_budget_currency FOREIGN KEY (currency_code)
        REFERENCES currency(currency_code)
        ON DELETE SET NULL,

    CONSTRAINT chk_amount_positive CHECK (amount > 0),
    CONSTRAINT chk_date_range CHECK (end_date >= start_date)
);


CREATE TABLE audit_log (
    log_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_id       NUMBER NOT NULL,
    action        VARCHAR2(50) NOT NULL,
    table_name    VARCHAR2(50) NOT NULL,
    record_id     NUMBER NOT NULL,
    action_time   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    old_value     VARCHAR2(4000),
    new_value     VARCHAR2(4000),
    CONSTRAINT fk_audit_user FOREIGN KEY (user_id)
        REFERENCES users(user_id)
        ON DELETE CASCADE,
    CONSTRAINT chk_action CHECK (action IN ('INSERT', 'UPDATE', 'DELETE'))
);


CREATE TABLE transaction_audit (
    audit_id               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
 
    -- Original transaction info
    transaction_id         NUMBER NOT NULL,
    transaction_datetime   TIMESTAMP NOT NULL,
    amount                 NUMBER(10,2) NOT NULL,
    type                   VARCHAR2(10) NOT NULL
        CHECK (LOWER(type) IN ('credit', 'debit')),
 
    -- Snapshot of user data
    user_id                NUMBER NOT NULL,
    user_name              VARCHAR2(100) NOT NULL,
    user_email             VARCHAR2(150) NOT NULL,
 
    -- Snapshot of category data
    category_id            NUMBER NOT NULL,
    category_name          VARCHAR2(100) NOT NULL,
 
    -- Snapshot of currency data
    currency_code          NUMBER,
 
    -- Audit system metadata
    audit_timestamp        TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
 
    -- Foreign key to currency table
    CONSTRAINT fk_audit_currency FOREIGN KEY (currency_code)
        REFERENCES currency(currency_code)
        ON DELETE SET NULL
);




---
plsql
---

Add a New Transaction and Audit It

CREATE OR REPLACE PROCEDURE add_transaction (
    p_user_id     IN NUMBER,
    p_category_id IN NUMBER,
    p_amount      IN NUMBER,
    p_type        IN VARCHAR2
) AS
BEGIN
    INSERT INTO transactions (
        user_id,
        category_id,
        amount,
        type,
        transaction_datetime
    ) VALUES (
        p_user_id,
        p_category_id,
        p_amount,
        p_type,
        SYSTIMESTAMP
    );
 
    COMMIT;
END;
/


CREATE OR REPLACE TRIGGER trg_transaction_audit
AFTER INSERT ON transactions
FOR EACH ROW
DECLARE
    v_user_name      VARCHAR2(100);
    v_user_email     VARCHAR2(150);
    v_category_name  VARCHAR2(100);
BEGIN
    -- Get user snapshot
    SELECT username, email
    INTO v_user_name, v_user_email
    FROM users
    WHERE user_id = :NEW.user_id;

    -- Get category snapshot
    SELECT category_name
    INTO v_category_name
    FROM categories
    WHERE category_id = :NEW.category_id;

    -- Insert into audit table with full snapshot
    INSERT INTO transaction_audit (
        transaction_id,
        transaction_datetime,
        amount,
        type,
        user_id,
        user_name,
        user_email,
        category_id,
        category_name,
        audit_timestamp
    ) VALUES (
        :NEW.transaction_id,
        :NEW.transaction_datetime,
        :NEW.amount,
        :NEW.type,
        :NEW.user_id,
        v_user_name,
        v_user_email,
        :NEW.category_id,
        v_category_name,
        SYSTIMESTAMP
    );
END;
/



Generate Monthly Expense Summary

CREATE OR REPLACE PROCEDURE monthly_expense_summary (
    p_user_id IN NUMBER,
    p_year    IN NUMBER,
    p_month   IN NUMBER
) AS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Monthly Expense Summary for User ID: ' || p_user_id);
    DBMS_OUTPUT.PUT_LINE('Period: ' || p_month || '/' || p_year);
    DBMS_OUTPUT.PUT_LINE('--------------------------------------');

    -- Total Spent (Debits)
    FOR rec IN (
        SELECT NVL(SUM(amount),0) AS total_spent
        FROM transactions
        WHERE user_id = p_user_id
        AND type = 'debit'
        AND EXTRACT(YEAR FROM transaction_datetime) = p_year
        AND EXTRACT(MONTH FROM transaction_datetime) = p_month
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Total Spent: ' || rec.total_spent);
    END LOOP;

    -- Total Savings (Credits)
    FOR rec IN (
        SELECT NVL(SUM(amount),0) AS total_savings
        FROM transactions
        WHERE user_id = p_user_id
        AND type = 'credit'
        AND EXTRACT(YEAR FROM transaction_datetime) = p_year
        AND EXTRACT(MONTH FROM transaction_datetime) = p_month
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Total Savings: ' || rec.total_savings);
    END LOOP;

    -- Expenditures by Category
    DBMS_OUTPUT.PUT_LINE('Category-wise Expenditure:');
    FOR rec IN (
        SELECT c.category_name, NVL(SUM(t.amount),0) AS total
        FROM categories c
        JOIN transactions t ON t.user_id = c.user_id
        WHERE t.user_id = p_user_id
          AND t.type = 'debit'
          AND EXTRACT(YEAR FROM t.transaction_datetime) = p_year
          AND EXTRACT(MONTH FROM t.transaction_datetime) = p_month
        GROUP BY c.category_name
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(' - ' || rec.category_name || ': ' || rec.total);
    END LOOP;
END;
/